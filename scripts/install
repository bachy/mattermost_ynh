#!/bin/bash

app=$YNH_APP_INSTANCE_NAME

# Source YunoHost helpers
source /usr/share/yunohost/helpers

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

# Set up common variables
root_path="$(pwd)/.."
final_path=/var/www/$app
data_path=/home/yunohost.app/$app
version=$(cat "$root_path/VERSION")
archive_filename="mattermost-$version.tar.gz"

# Check for 64 bits support
arch="$(uname -m)"
if [[ "$arch" != "x86_64" ]]; then
    echo "Mattermost requires an x86_64 machine, but this one is '${arch}'."
    exit 1
fi

# Check for MySQL version (ugly, to be improved)
mysql_version=$(mysql --version)
if    [[ "$mysql_version" == *"Distrib 4."* ]]  \
   || [[ "$mysql_version" == *"Distrib 5.0"* ]] \
   || [[ "$mysql_version" == *"Distrib 5.1"* ]] \
   || [[ "$mysql_version" == *"Distrib 5.2"* ]] \
   || [[ "$mysql_version" == *"Distrib 5.3"* ]] \
   || [[ "$mysql_version" == *"Distrib 5.4"* ]] \
   || [[ "$mysql_version" == *"Distrib 5.5"* ]];
then
    echo "Mattermost requires MySQL 5.6 or higher."
    exit 1
fi

# Check domain availability
sudo yunohost app checkurl $domain$path -a $app
if [[ ! $? -eq 0 ]]; then
    exit 1
fi

# Store config on YunoHost instance
ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path"
ynh_app_setting_set "$app" is_public "$is_public"

# Install dependencies
command -v supervisorctl >/dev/null 2>&1 || sudo apt-get install -y supervisor

# Generate MySQL password and create database
dbuser=$app
dbname=$app
dbpass=$(ynh_string_random 12)
ynh_mysql_create_db "$dbname" "$dbuser" "$dbpass"
ynh_app_setting_set "$app" dbpass "$dbpass"
ynh_app_setting_set "$app" dbuser "$dbuser"
ynh_app_setting_set "$app" dbname "$dbname"

# Create user for email notifications
smtp_password=$(ynh_string_random 12)
sudo useradd -M --shell /bin/false -p $(openssl passwd -1 "$smtp_password") "$app"
sudo yunohost app setting mattermost smtppwd -v "$smtp_password"

# Download and install code (replaced by embeded sources)
# archive_url="https://releases.mattermost.com/${version}/mattermost-team-${version}-linux-amd64.tar.gz"

sudo mkdir -p "$final_path"
sudo mkdir -p "$data_path"

# wget --quiet --output-document "$archive_filename" "$archive_url"
sudo tar -xvz --file "$root_path/src/mattermost-team-3.4.0-linux-amd64.tar.gz" --directory "$final_path" --strip-components 1
# rm -f "$archive_filename"

# Copy mattermost configuration file to mm conf directory and modify it
finalconfigjson = $final_path/config/config.json
sudo cp $root_path/conf/mm.conf.json $finalconfigjson

# Change variables in Mattermost config
db_connection_url="${dbuser}:${dbpass}@tcp(127.0.0.1:3306)/${dbname}?charset=utf8mb4,utf8"
sudo sed -i "s|\"DataSource\": \".*\"|\"DataSource\": \"${db_connection_url}\"|g"      $finalconfigjson

sudo sed -i "s|\"Directory\": \"./data/\"|\"Directory\": \"${data_path}/\"|g"          $finalconfigjson

sudo sed -i "s|\"FeedbackEmail\": \"\"|\"FeedbackEmail\": \"no-reply@${domain}\"|g"       $finalconfigjson
sudo sed -i "s|\"SMTPUsername\": \"\"|\"SMTPUsername\": \"${app}\"|g"                     $finalconfigjson
sudo sed -i "s|\"SMTPPassword\": \"\"|\"SMTPPassword\": \"${smtp_password}\"|g"          $finalconfigjson

sudo sed -i "s|\"FileLocation\": \"\"|\"FileLocation\": \"/var/log/${app}.log\"|g" $finalconfigjson

# TODO add ldap support
# sudo sed -i "s|\"LdapServer\": \"\"|\"LdapServer\": \"????\"|g" $finalconfigjson




# Set permissions to app directories
sudo chown -R www-data: $final_path
sudo chown -R www-data: $data_path

# Modify Nginx configuration file and copy it to Nginx conf directory
sudo cp $root_path/conf/nginx.conf-nosub /etc/nginx/conf.d/$domain.d/mattermost.conf

# Copy supervisor script
sudo cp $root_path/conf/supervisor.conf /etc/supervisor/conf.d/mattermost.conf

# TODO wait for MM to allow hosting at any route like http://www.example.com/chat. https://mattermost.atlassian.net/browse/PLT-200


# If app is public, add url to SSOWat conf as skipped_uris
if [[ $is_public -eq 1 ]]; then
	# unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload Nginx and regenerate SSOwat conf
sudo service nginx reload
sudo yunohost app ssowatconf

# Start app
sudo supervisorctl reload
